import Haste
import Haste.Graphics.Canvas
import Data.List (minimumBy)

-- >>> import Test.QuickCheck

-- Color theme
-- http://www.colourlovers.com/palette/15/tech_light
green = RGB 209 231  81
blue  = RGB  38 173 228
white = RGB 255 255 255

-- Dimensions
spacing         = 60 :: Double
markerWidth     = 20 :: Double
ringInnerRadius = 22 :: Double
ringWidth       = 6 :: Double
originX         = -15 :: Double
originY         = 140 :: Double

-- | Yinsh hex coordinates
type YCoord = (Int, Int)

-- | Player types: black & white or blue & green
data Player = B | W

-- | Translate hex coordinates to screen coordinates
fromCoord :: YCoord -> Point
fromCoord (ya, yb) = (0.5 * sqrt 3 * x' + originX,
                      y' - 0.5 * x' + originY)
                where x' = spacing * fromIntegral ya
                      y' = spacing * fromIntegral yb

-- could be generated by generating all triangular lattice points smaller
-- than a certain cutoff (~ 5)
numPoints :: [[Int]]
numPoints = [[2..5], [1..7], [1..8], [1..9],
             [1..10], [2..10], [2..11], [3..11],
             [4..11], [5..11], [7..10]]

-- | All points on the board
-- >>> length coords
-- 85
coords :: [YCoord]
coords = concat $ zipWith (\list ya -> map (\x -> (ya, x)) list) numPoints [1..]

-- | Check if two points are connected by a line
-- >>> connected (3, 4) (8, 4)
-- True
--
-- prop> ((\c1 c2 -> connected c1 c2 == connected c2 c1) :: YCoord -> YCoord -> Bool)
--
connected :: YCoord -> YCoord -> Bool
connected (x, y) (a, b) =        x == a
                          ||     y == b
                          || x - y == a - b

-- | List of points reachable from a certain point
reachable :: YCoord -> [YCoord]
reachable c = filter (connected c) coords

data DisplayState = BoardOnly
                  | ConnectedPoints
                  | Marker Player

-- | All grid points as screen coordinates
points :: [Point]
points = map fromCoord coords

-- | Translate by hex coordinate
translateC :: YCoord -> Picture () -> Picture ()
translateC = translate . fromCoord

playerColor :: Player -> Color
playerColor B = blue
playerColor W = green

ring :: Player -> Picture ()
ring p = do
    setFillColor $ playerColor p
    fill circL
    stroke circL
    setFillColor white
    fill circS
    stroke circS
    cross ringInnerRadius
        where circL = circle (0, 0) (ringInnerRadius + ringWidth)
              circS = circle (0, 0) ringInnerRadius

marker :: Player -> Picture ()
marker p = do
    setFillColor $ playerColor p
    fill circ
    stroke circ
        where circ = circle (0, 0) markerWidth

cross :: Double -> Picture ()
cross len = do
    l
    rotate (2 * pi / 3) l
    rotate (4 * pi / 3) l
        where l = stroke $ line (0, -len) (0, len)

dot :: Picture ()
dot = do
    setFillColor $ RGB 0 0 0
    fill $ circle (0, 0) 5

board :: Picture ()
board = do
    sequence_ $ mapM translate points (cross (0.5 * spacing))
    -- sequence_ $ mapM (translate . fromCoord) (reachable (3, 6)) dot
    translateC (3, 4) $ ring B
    translateC (4, 9) $ ring B
    translateC (8, 7) $ ring W
    translateC (6, 3) $ ring W
    translateC (4, 8) $ ring B
    translateC (6, 4) $ marker W
    translateC (6, 5) $ marker W
    translateC (6, 7) $ marker W
    translateC (6, 6) $ marker B

-- | Render everything that is seen on the screen
-- Second argument is the coordinate where the mouse is
display :: DisplayState -> YCoord -> Picture ()
display BoardOnly _       = board
display ConnectedPoints c = do
    board
    sequence_ $ mapM (translate . fromCoord) (reachable c) dot
display (Marker p) c      = do
    board
    translateC c $ marker p

getClosestCoord :: Point -> YCoord
getClosestCoord (x, y) = coords !! snd lsort
    where lind = zipWith (\p i -> (dist p, i)) points [0..]
          lsort = minimumBy cmpFst lind
          dist (x', y') = (x-x')^2 + (y-y')^2
          cmpFst t1 t2 = compare (fst t1) (fst t2)

showMoves :: Canvas -> (Int, Int) -> IO ()
showMoves can (x, y) =
    render can $ do
        -- display BoardOnly
        -- display ConnectedPoints (getClosestCoord (fromIntegral x, fromIntegral y))
        display (Marker B) (getClosestCoord (fromIntegral x, fromIntegral y))

main :: IO ()
main = do
    Just can <- getCanvasById "canvas"
    render can board -- TODO: needed?
    Just ce <- elemById "canvas"
    ce `onEvent` OnMouseMove $ showMoves can
    return ()
