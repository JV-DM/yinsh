module Yinsh where

import Control.Monad (guard)

-- $setup
-- >>> import Data.List (sort, nub)
-- >>> import Test.QuickCheck hiding (vector)
-- >>> let boardCoords = elements coords
-- >>> instance Arbitrary Direction where arbitrary = elements directions

-- | Yinsh hex coordinates
type YCoord = (Int, Int)

-- | The six hex directions
data Direction = N | NE | SE | S | SW | NW
                 deriving (Eq, Enum, Bounded, Show)

data Element = Ring Player YCoord
             | Marker Player YCoord
             deriving (Show, Eq)

data TurnMode = AddRing
              | AddMarker
              | MoveRing YCoord
              | RemoveRun
              | RemoveRing
              | PseudoTurn
              deriving (Eq, Show)

type Board = [Element]

data GameState = GameState
    { activePlayer :: Player
    , turnMode :: TurnMode
    , board :: Board
    , ringsB :: Int
    , ringsW :: Int
    } deriving Show

-- | Player types: black & white or blue & green
data Player = B | W
              deriving (Eq, Enum, Bounded, Show)

-- Game behaviour
ringsForWin :: Int
ringsForWin = 2

-- | Similar to Enum's succ, but for cyclic data structures.
-- Wraps around to the beginning when it reaches the 'last' element.
next :: (Eq a, Enum a, Bounded a) => a -> a
next x | x == maxBound = minBound
       | otherwise     = succ x

-- | All directions
directions :: [Direction]
directions = [minBound .. maxBound]

-- | Opposite direction
--
-- prop> (opposite . opposite) d == d
opposite :: Direction -> Direction
opposite = next . next . next

-- | Vector to the next point on the board in a given direction
vector :: Direction -> YCoord
vector N  = ( 0,  1)
vector NE = ( 1,  1)
vector SE = ( 1,  0)
vector S  = ( 0, -1)
vector SW = (-1, -1)
vector NW = (-1,  0)

-- could be generated by generating all triangular lattice points smaller
-- than a certain cutoff (~ 5)
numPoints :: [[Int]]
numPoints = [[2..5], [1..7], [1..8], [1..9],
             [1..10], [2..10], [2..11], [3..11],
             [4..11], [5..11], [7..10]]

-- | All points on the board
--
-- >>> length coords
-- 85
--
coords :: [YCoord]
coords = concat $ zipWith (\list ya -> map (\x -> (ya, x)) list) numPoints [1..]

-- | Check if two points are connected by a line
--
-- >>> connected (3, 4) (8, 4)
-- True
--
-- prop> connected c1 c2 == connected c2 c1
--
connected :: YCoord -> YCoord -> Bool
connected (x, y) (a, b) =        x == a
                          ||     y == b
                          || x - y == a - b

-- | List of points reachable from a certain point
--
-- Every point should be reachable within two moves
-- prop> forAll boardCoords (\c -> sort coords == sort (nub (reachable c >>= reachable)))
--
reachable :: YCoord -> [YCoord]
reachable c = filter (connected c) coords

-- | Vectorially add two coords
add :: YCoord -> YCoord -> YCoord
add (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

-- | Vectorially subtract two coords
sub :: YCoord -> YCoord -> YCoord
sub (x1, y1) (x2, y2) = (x1 - x2, y1 - y2)

-- | Scalar product
prod :: YCoord -> YCoord -> Int
prod (x1, y1) (x2, y2) = x1 * x2 + y1 * y2

-- | Square norm
norm2 :: YCoord -> Int
norm2 (x, y) = x * x + y * y

-- | Get all valid ring moves starting from a given point
validRingMoves :: Board -> YCoord -> [YCoord]
validRingMoves b start = filter (freeCoord b) $ concatMap (validInDir False start) directions
    where markerPos = [ c | Marker _ c <- b ]
          ringPos   = [ c | Ring _ c <- b ]
          validInDir :: Bool -> YCoord -> Direction -> [YCoord]
          validInDir jumped c d = c : rest
              where nextPoint = c `add` vector d
                    rest = if nextPoint `elem` coords && nextPoint `notElem` ringPos
                           then if nextPoint `elem` markerPos
                                then validInDir True nextPoint d
                                else if jumped
                                     then [nextPoint]
                                     else validInDir False nextPoint d
                           else []

-- | Get all nearest neighbors
--
-- Every point has neighbors
--
-- >>> sort coords == sort (nub (coords >>= neighbors))
-- True
--
-- Every point is a neighbor of its neighbor
-- prop> forAll boardCoords (\c -> c `elem` (neighbors c >>= neighbors))
--
neighbors :: YCoord -> [YCoord]
neighbors c = filter (`elem` coords) adj
    where adj = mapM (add . vector) directions c

-- | Get the coordinates of a players markers
markerCoords :: Board -> Player -> [YCoord]
markerCoords b p = [ c | Marker p' c <- b, p == p' ]

-- | Get the coordinates of a players rings
ringCoords :: Board -> Player -> [YCoord]
ringCoords b p = [ c | Ring p' c <- b, p == p' ]

-- | Check if a certain point on the board is free
freeCoord :: Board -> YCoord -> Bool
freeCoord b c = c `notElem` occupied
    where occupied = [ o | Ring _ o <- b ] ++ [ o | Marker _ o <- b ]

-- | Check if a coordinate is one of five in a row
--
-- prop> partOfRun (take 5 $ adjacent c d) c == True
partOfRun :: [YCoord] -> YCoord -> Bool
partOfRun markers start = any (partOfRunD markers start) [NW, N, NE]

partOfRunD :: [YCoord] -> YCoord -> Direction -> Bool
partOfRunD markers start dir = length (runCoordsD markers start dir) == 5

-- | Return the coordinates of the markers making up a run
runCoords :: [YCoord] -> YCoord -> [YCoord]
runCoords markers start = if null cs then [] else head cs
    where cs = filter ((== 5) . length) $ map (runCoordsD markers start) [NW, N, NE]

-- | Combine two lists by taking elements alternatingly. If one list is longer,
-- append the rest.
--
-- prop> zipAlternate [] l == l
-- prop> zipAlternate l [] == l
-- prop> zipAlternate l l  == (l >>= (\x -> [x, x]))
zipAlternate :: [a] -> [a] -> [a]
zipAlternate []     ys = ys
zipAlternate (x:xs) ys = x : zipAlternate ys xs

-- | Get adjacent coordinates in a given direction which could belong to a run.
--
-- prop> runCoordsD (take 7 $ adjacent c d) c d == (take 5 $ adjacent c d)
runCoordsD :: [YCoord] -> YCoord -> Direction -> [YCoord]
runCoordsD markers start dir = if start `elem` markers
                               then take 5 $ zipAlternate right left
                               else []
    where right = takeAvailable dir
          left  = tail $ takeAvailable (opposite dir)  -- use tail to avoid taking the start twice
          takeAvailable d = takeWhile (`elem` markers) $ adjacent start d

-- | Get the adjacent (including start) coordinates in a given direction
adjacent :: YCoord -> Direction -> [YCoord]
adjacent start dir = iterate (`add` vector dir) start

-- | Check if point three is on a line between the first two
--
-- prop> let shift = add (vector d) in between c (shift (shift c)) (shift c)
-- prop> let shift = add (vector d) in not $ between c (shift c) (shift (shift c))
between :: YCoord -> YCoord -> YCoord -> Bool
between a b c = n2x * n2y == (x `prod` y)^2 && n2y < n2x && n2z < n2x
    where x = b `sub` a
          y = c `sub` a
          z = c `sub` b
          n2x = norm2 x
          n2y = norm2 y
          n2z = norm2 z

-- | Flip all markers between two given coordinates
flippedMarkers :: Board -> YCoord -> YCoord -> Board
flippedMarkers b s e = map flipE b
    where flipE (Marker p c) = Marker (newCol p c) c
          flipE el           = el
          newCol p c = if between s e c
                       then next p
                       else p

-- | Get new game state after 'interacting' at a certain coordinate.
newGameState :: GameState -> YCoord -> Maybe GameState
newGameState gs cc = -- TODO: the guards should be (?) unnecessary when calling this function from 'gamestates'
    case turnMode gs of
        AddRing -> do
            guard (freeCoord board' cc)
            Just gs { activePlayer = nextPlayer
                    , turnMode = if numRings < 9 then AddRing else AddMarker
                    , board = Ring activePlayer' cc : board'
                    }
            where numRings = length [ 0 | Ring _ _ <- board' ]
        AddMarker -> do
            guard (cc `elem` ringCoords board' activePlayer')
            Just gs { turnMode = MoveRing cc
                    , board = Marker activePlayer' cc : removeRing board'
                    }
        (MoveRing start) -> do
            guard (cc `elem` validRingMoves board' start)
            Just gs { activePlayer = nextPlayer
                    , turnMode = nextTurnMode
                    , board = Ring activePlayer' cc : flippedBoard
                    }
            where hasRun = any (partOfRun playerMarkers') playerMarkers'
                  nextTurnMode = if hasRun
                                 then PseudoTurn
                                 else AddMarker -- TODO: other player could have a run
                  flippedBoard = flippedMarkers board' start cc
                  playerMarkers' = markerCoords flippedBoard activePlayer'
        RemoveRun -> do
            guard (partOfRun playerMarkers cc)
            Just gs { turnMode = RemoveRing
                    , board = removeRun board'
                    }
        RemoveRing -> do
            guard (cc `elem` ringCoords board' activePlayer')
            Just gs { activePlayer = nextPlayer
                    , turnMode = AddMarker -- TODO: other player could have a run
                    , board = removeRing board'
                    , ringsB = if activePlayer' == B then ringsB gs + 1 else ringsB gs
                    , ringsW = if activePlayer' == W then ringsW gs + 1 else ringsW gs
                    }
        PseudoTurn ->
            Just gs { activePlayer = nextPlayer
                    , turnMode = RemoveRun
                    }
    where activePlayer' = activePlayer gs
          nextPlayer    = next activePlayer'
          removeRing    = filter (/= Ring activePlayer' cc)
          removeRun     = filter (`notElem` map (Marker activePlayer') (runCoords playerMarkers cc))
          board'        = board gs
          playerMarkers = markerCoords board' activePlayer'

initialGameState :: GameState
initialGameState = GameState { activePlayer = B
                             , turnMode = AddRing
                             , board = []
                             , ringsW = 0
                             , ringsB = 0
                             }

-- Testing stuff

testBoard :: Board
testBoard = [ Ring B (3, 4)
            , Ring B (4, 9)
            , Ring B (7, 9)
            , Ring B (8, 9)
            , Ring B (7, 10)
            , Ring W (8, 7)
            , Ring W (6, 3)
            , Ring W (4, 8)
            , Ring W (4, 2)
            , Ring W (2, 5)
            , Marker W (6, 4)
            , Marker W (6, 5)
            , Marker W (6, 7)
            , Marker W (5, 5)
            , Marker W (4, 5)
            , Marker W (3, 5)
            , Marker B (6, 6)]

testGameState = GameState { activePlayer = B
                          , turnMode = AddMarker
                          , board = testBoard
                          , ringsW = 0
                          , ringsB = 0
                          }

testGameStateW = GameState { activePlayer = W
                          , turnMode = AddMarker
                          , board = testBoard
                          , ringsW = 0
                          , ringsB = 0
                          }


